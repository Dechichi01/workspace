package com.pratica.dez;

import java.io.IOException;
import java.sql.Date;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Scanner;

import com.pratica.dez.database.*;
import com.pratica.dez.model.classes.Aluno;
import com.pratica.dez.model.classes.AlunoPosGraduacao;
import com.pratica.dez.model.classes.Curso;
import com.pratica.dez.model.classes.Disciplina;
import com.pratica.dez.model.classes.FolhaPagamento;
import com.pratica.dez.model.classes.Funcionario;
import com.pratica.dez.model.classes.Professor;
import com.pratica.dez.model.classes.ProjetoPesquisa;
import com.pratica.dez.model.classes.Tecnico;
import com.pratica.dez.model.classes.Vigilante;
import com.pratica.dez.model.interfaces.IPesquisador;
import com.pratica.dez.view.VisaoAluno;
import com.pratica.util.exceptions.SetInvalido;
import com.pratica.util.persistence.Persist;

public class Main {
	
	public static void main(String args[])
	{	
		Aluno a = new Aluno();
		Persist.gravar(a, "alunos.dat");
		System.out.println("Success");
		Aluno a2 = (Aluno) Persist.recuperar("alunos.dat");
		VisaoAluno.mostrarDados(a2);
		/*try 
		{
			Funcionario.setPisoSalarial(1000);
			Professor.setValorHoraAula(20);
			Tecnico.setValorHoraExtra(10);
		} 
		catch (SetInvalido e) 
		{
			System.out.println(e.getMessage());
			System.out.println("Não foi possível atribuir variáveis chave do programa. Encerrando...");
			return;
		}

		Funcionario.setPercentBonificacao(.3);
		
		DadosAlunos.listar();
		for (int i = 1; i< 2; i++)
		{
			System.out.printf("##### Professor %d: \n", i);
			Professor p = new Professor();
			System.out.printf("##### Aluno %d: \n", i);
			Aluno a = new Aluno();
			
			DadosFuncionarios.cadastrar(p);
			DadosAlunos.cadastrar(a);
		}
		
		Funcionario[] funcionarios = DadosFuncionarios.getFuncionarios();
		Aluno[] alunos = DadosAlunos.getAlunos();	
		
		try 
		{
			ProjetoPesquisa proj = new ProjetoPesquisa(1000,"Projeto Teste", 
					Date.valueOf(LocalDateTime.now().toLocalDate()), (Professor)funcionarios[0], alunos);
			
			for (Funcionario prof : funcionarios)
			{
				proj.adicionaPesquisador((IPesquisador) prof);
			}
			
			proj.listaPesquisadores();
		} 
		catch (SetInvalido e) 
		{
			e.printStackTrace();
		}*/
	}
}
